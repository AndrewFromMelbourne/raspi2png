name: Create Draft GitHub Release And Tag On Merging Changelog PR

on:
  pull_request:
    types: [closed]

jobs:
  check-should-run:
    runs-on: ubuntu-20.04
    outputs:
      should_run: ${{ steps.check_should_run.outputs.should_run }}
    steps:

      - name: Set 'should run' variable
        id: check_should_run
        env:
          CI_CHANGELOG_BUMP_BRANCH: ${{ secrets.CI_CHANGELOG_BUMP_BRANCH }}
          PR_MERGED: ${{ github.event.pull_request.merged }}
        run: |
          if [[ "${GITHUB_HEAD_REF}" == "${CI_CHANGELOG_BUMP_BRANCH}" ]] && [[ "${PR_MERGED}" == "true" ]]; then
            conditions_met="true"
          else
            conditions_met="false"
          fi
          echo "::set-output name=should_run::${conditions_met}"

  add-version-tag:
    needs: [ check-should-run ]
    if: needs.check-should-run.outputs.should_run == 'true'
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Create and push Debian version tag
        run: |
          new_version="$(head -n1 debian/changelog | awk '{print $2}' | cut -d'-' -f1 | sed "s/(//g" | sed "s/)//g")"
          git tag --force "v${new_version}"
          git push --force --tags

  build-debian:
    needs: [ add-version-tag ]
    runs-on: ubuntu-20.04
    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Build Debian package
        uses: pi-top/action-debian-package@v0.2.2
        with:
          target_architecture: "armhf"
          
          source_directory: "${{ github.workspace }}"
          artifacts_directory: "${{ github.workspace }}/artifacts/bin"

          docker_image: "pitop/deb-build:latest"
          distribution: "buster-backports"

          lintian_opts: "--dont-check-part nmu --no-tag-display-limit --display-info --show-overrides --fail-on error --fail-on warning --fail-on info"
          # Package uses latest packaging syntax and Lintian opts/tags
          dpkg_buildpackage_opts: "--no-sign --no-check-builddeps --post-clean"

      - name: Separate Debian source package files from binary
        run: |
          mkdir -p ${{ github.workspace }}/artifacts/src/
          mv ${{ github.workspace }}/artifacts/bin/* ${{ github.workspace }}/artifacts/src/
          mv ${{ github.workspace }}/artifacts/src/*.deb ${{ github.workspace }}/artifacts/bin/

      - name: Upload Debian source package files
        uses: actions/upload-artifact@v2
        with:
          name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-deb-src"
          path: "${{ github.workspace }}/artifacts/src/"

      - name: Upload Debian binary packages
        uses: actions/upload-artifact@v2
        with:
          name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-deb"
          path: "${{ github.workspace }}/artifacts/bin/"

  create-draft-release:
    runs-on: ubuntu-20.04
    needs: build-debian
    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Get Debian Version
        id: get_deb_version
        run: |
          DEB_VER=$(head -n1 debian/changelog | awk '{print $2}' | cut -d'-' -f1 | sed "s/(//g" | sed "s/)//g")
          echo "::set-output name=deb_ver::$DEB_VER"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.get_deb_version.outputs.deb_ver }}"
          release_name: "v${{ steps.get_deb_version.outputs.deb_ver }}"
          draft: true
          prerelease: false

      - name: Download Debian binary artifacts
        uses: actions/download-artifact@v2
        with:
            name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-deb"
            path: "./deb/"

      - name: Download Debian source artifacts
        uses: actions/download-artifact@v2
        with:
            name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-deb-src"
            path: "./deb-src/"

      - name: Get main package filename
        id: get_deb_main_pkg_filename
        run: |
          cd ./deb
          PKG_NAME=$(ls | grep "^raspi2png_.*.deb$")
          echo "::set-output name=filename::$PKG_NAME"

      - name: Upload main Debian package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./deb/${{ steps.get_deb_main_pkg_filename.outputs.filename }}
          asset_name: ${{ steps.get_deb_main_pkg_filename.outputs.filename }}
          asset_content_type: application/vnd.debian.binary-package

      - name: Get dsc filename
        id: get_dsc_filename
        run: |
          cd ./deb-src
          DSC_FILENAME=$(ls | grep "^raspi2png_.*.dsc$")
          echo "::set-output name=filename::$DSC_FILENAME"

      - name: Upload dsc filename
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./deb-src/${{ steps.get_dsc_filename.outputs.filename }}
          asset_name: ${{ steps.get_dsc_filename.outputs.filename }}
          asset_content_type: text/plain

      - name: Get buildinfo filename
        id: get_buildinfo_filename
        run: |
          cd ./deb-src
          BUILDINFO_FILENAME=$(ls | grep "^raspi2png_.*.buildinfo$")
          echo "::set-output name=filename::$BUILDINFO_FILENAME"

      - name: Upload buildinfo filename
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./deb-src/${{ steps.get_buildinfo_filename.outputs.filename }}
          asset_name: ${{ steps.get_buildinfo_filename.outputs.filename }}
          asset_content_type: text/plain

      - name: Get changes filename
        id: get_changes_filename
        run: |
          cd ./deb-src
          CHANGES_FILENAME=$(ls | grep "^raspi2png_.*.changes$")
          echo "::set-output name=filename::$CHANGES_FILENAME"

      - name: Upload changes filename
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./deb-src/${{ steps.get_changes_filename.outputs.filename }}
          asset_name: ${{ steps.get_changes_filename.outputs.filename }}
          asset_content_type: text/plain

      - name: Get source filename
        id: get_source_filename
        run: |
          cd ./deb-src
          SOURCE_FILENAME=$(ls | grep "^raspi2png_.*.tar.xz$")
          echo "::set-output name=filename::$SOURCE_FILENAME"

      - name: Upload source filename
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./deb-src/${{ steps.get_source_filename.outputs.filename }}
          asset_name: ${{ steps.get_source_filename.outputs.filename }}
          asset_content_type: text/plain
